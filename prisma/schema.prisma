// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  groupMembers  GroupMember[]
  createdGroups Group[]       @relation("GroupCreator")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Group {
  id          String   @id @default(cuid())
  name        String
  description String?
  inviteCode  String   @unique @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String

  creator       User            @relation("GroupCreator", fields: [createdBy], references: [id])
  members       GroupMember[]
  shoppingLists ShoppingList[]

  @@map("groups")
}

model GroupMember {
  id      String @id @default(cuid())
  groupId String
  userId  String
  role    Role   @default(MEMBER)
  joinedAt DateTime @default(now())

  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
  @@map("group_members")
}

model ShoppingList {
  id          String   @id @default(cuid())
  name        String
  description String?
  groupId     String
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  group Group           @relation(fields: [groupId], references: [id], onDelete: Cascade)
  items ShoppingItem[]

  @@map("shopping_lists")
}

model ShoppingItem {
  id             String   @id @default(cuid())
  name           String
  quantity       Int      @default(1)
  unit           String?
  notes          String?
  isCompleted    Boolean  @default(false)
  priority       Priority @default(MEDIUM)
  category       String?
  estimatedPrice Float?
  actualPrice    Float?
  shoppingListId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  shoppingList ShoppingList @relation(fields: [shoppingListId], references: [id], onDelete: Cascade)

  @@map("shopping_items")
}

enum Role {
  ADMIN
  MEMBER
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
} 